'_____________________________________Cmmercial______________________________________'
battery: containing coloums                  
column: Contains two elevators
elevator: moving up or moving down inside column depending on selected floor
elevatorDoor: The door of the elevator
elevatorState: position of elevator (moving, stoped, idle)
callButton: button direction up or down to request elevator
openDoorButton: The button that force door to stay open
closeDoorButton: The button that force door to stay close 
controlPanel: unit of system displaying Floor

SET RC to 1
SET selectedElevator TO NULL
SET waitList TO array NULL
SET elevatorList TO array numberOfElevators 

SET Column1 TO numberFloors1
SET numberFloors1 TO array OF numberOfFloors floors, RCl    

SET Column2 TO numberFloors2
SET numberFloors2 TO array OF numberOfFloors floors, RCl    

SET Column3 TO numberFloors3
SET numberFloors3 TO array OF numberOfFloors floors, RCl     

SET Column4 TO numberFloors4
SET numberFloors4 TO array OF numberOfFloors floors, RCl      

SEQUENCE elevatorState WITH floor, direction
    CALL requestedFloorButton USING floor, direction
    CALL battery USING floor, direction
    CALL operateElevator USING selectedElevator
END SEQUENCE

SEQUENCE requestedFloorButton WITH floor, direction
    IF requestedFloorButton is pressed THEN
        PUSH floor AND direction to waitList
        SET floorLightBtn TO ON
    ELSE
        SET floorLightBtn TO OFF
END SEQUENCE

SEQUENCE selectColumn WITH floor, direction RETURNING selectedColumn
    IF floorRequest FROM B6 TO B1 THAN RC THEN
        RETURN Column1 TO selectedColumn

    ELSE IF floorRequest FROM 1 = 20 
        RETURN Column2 TO selectedColumn

    ELSE IF floorRequest FROM 21 = 40 
        RETURN Column3 TO selectedColumn

    ELSE IF floorRequest FROM 41 = 60 AND 
        RETURN Column4 TO selectedColumn
    END IF
END SEQUENCE

SEQUENCE operateElevator WITH selectedElevator
    
    READ systemStatus WIth elevator
    IF systemStatus EQUAL safe THEN
        GET floor FROM sorted_waitList
        IF sorted_waitList NOT EQUAL NULL THEN
            IF requestedFloor EQUAL currentElevatorFloor THEN
                CALL hasArrived USING selectedElevator
                POP requestedFloor FROM sorted_waitList
            ELSE IF requestedFloor GREATER THAN currentElevatorFloor THEN
                REPEAT
                    CALL goUp USING selectedElevator
                UNTIL currentElevatorFloor EQUAL requestedFloor
                CALL hasArrived USING selectedElevator
                POP requestedFloor FROM sorted_waitList
            ELSE IF requestedFloor LESSER THAN currentElevatorFloor THEN
                REPEAT
                    CALL goDown USING selectedElevator
                UNTIL currentElevatorFloor EQUAL requestedFloor
                CALL hasArrived USING selectedElevator
                POP requestedFloor FROM sorted_waitList
            END IF
        ELSE
            CALL Idle USING selectedElevator
        END IF
    END IF
END SEQUENCE

SEQUENCE Idle WITH selectedElevator
    SET currentElevatorState TO idle
    SET ElevatorList TO array of numberOfElevators Elevator
    FOR EACH Elevator IN ElevatorList
        IF currentElevatorState EQUAL idle
            REPEAT  
                goDown
            UNTIL currentElevatorFloor EQUAL lobbyLevel
    END FOR
END SEQUENCE

SEQUENCE indexDifference WITH ElevatorList
    FOR EACH Elevator IN ElevatorList
        SET indexDifference TO array OF ABSOLUTE requestedFloor MINUS currentElevatorFloor
    END FOR
    IF indexDifference EQUAL lowestIndex
        SET Elevator TO BestElevator 
    END IF
    RETURN BestElevator
END SEQUENCE

SEQUENCE waitList RETURNING sorted_waitList
    GET requestedFloors FROM waitList
    SORT waitList WITH elevatorSortingAlgorithm
    SET waitList TO sorted_list
    RETURN sorted_waitList
END SEQUENCE

SEQUENCE hasArrived WITH selectedElevator
    SET floorLightBtn TO Off
    SET directionLight TO On
    CALL operateDoors USING selectedlElevator
END SEQUENCE

SEQUENCE operateDoors WITH selectedElevator
    SET checkSystem USING selectedElevator
        WHILE selectedElevator safe NOT EQUAL TRUE
        REPEAT
            INCREMENT timer by 2
        UNTIL selectedElevator safe EQUAL TRUE

        IF timer GREATER than 0        
            SET doorsElevator TO OPEN
        ELSE 
            SET doorsElevator TO CLOSED         
        END IF
END SEQUENCE

SEQUENCE goDown WITH selectedElevator
    FOR EACH numberOfFloor IN floors 
        WHILE numberOfFloor index GREATER THAN requestedFloor index
            DECREASE numberOfFloor by 1
    END FOR
END SEQUENCE

SEQUENCE goUp WITH selectedElevator
    FOR EACH numberOfFloor IN floors 
        WHILE numberOfFloor index LESSER THAN requestedFloor index
            INCREMENT numberOfFloor by 1
    END FOR
END SEQUENCE

SEQUENCE checkSystem WITH selectedElevator
    CALL weightMax
    CALL obstructed

    IF weightMax EQUAL FALSE AND obstructed EQUAL FALSE THEN
        SET safe TO TRUE
    ELSE
        SET safe TO FALSE
        REPEAT 
            CALL checkSystem USING selectedElevator
        UNTIL safe EQUAL TRUE
        RETURN safe
    END IF
END SEQUENCE

SEQUENCE weightMax WITH selectedElevator
   SET weightMax TO 2560 lbs
    READ Weight FROM Elevator
    IF weight GREATER THAN weightMax THEN
        RETURN TRUE
    ELSE RETURN FALSE
    END IF
END SEQUENCE